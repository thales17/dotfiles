#+title: projects/lisp/bullsandcows.org
Last Updated: <2022-01-07 Fri>

* Bulls and Cows
- This code cracking logic game similar to Mastermind
- The computer picks a random 4 digit number
- The player makes a guess as to what that 4 digit number is
- Each guess is scored by the number of "bulls" and "cows"
- A "bull" means that a digit is in the right position
- A "cow" means that the digit is in the string but not in the right position
- The score doesn't tell you which digit is a "bull" or "cow" only how many digits are each
- For example if the secret is =1234= and the player guesses =4130= the score would be =1B2C=, the =3= being the "bull" and the =4= and =1= being in the code but not in the correct position
- Another requirement of the secret code is that it has no repeating digits
- [[https://en.wikipedia.org/wiki/Bulls_and_Cows][Wikipedia: Bulls and Cows]]

* Project Scope
- This is a series of functions that allow you to play the game bulls and cows inside a common lisp REPL
- You will be able to play the number guessing game or invoke the solver to watch the computer guess the answer

* Implementation
** TODO Setting up the game
- Found an issue with the code gen having a duplicate digit


- This code defines the game setup function and global variable =*secret-code*=
- The setup function, =bulls-cows-setup=, will generate a list of 4 random integers and store that in =*secret-code*=
- The setup function returns =t= to not spoil the secret code
#+begin_src lisp
  (defparameter *secret-code* nil)

  (defun bulls-cows-setup ()
    (let ((digits '(0 1 2 3 4 5 6 7 8 9))
	  (len 9)
	  (current-digit 0))
      (flet ((rand-digit ()
	       (let* ((index (random (- 10 current-digit)))
		      (digit (nth index digits))
		      (last (nth len digits)))
		 (setf current-digit (1+ current-digit))
		 (setf len (1- len))
		 (setf (nth index digits) last)
		 digit)))
	(setf *secret-code* (list (rand-digit)
				  (rand-digit)
				  (rand-digit)
				  (rand-digit)))))
    t)
#+end_src

#+RESULTS:
: BULLS-COWS-SETUP
