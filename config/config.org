* bashrc
#+name: .bashrc
#+begin_src sh :tangle ~/.bashrc
  #
  # ~/.bashrc
  #

  # If not running interactively, don't do anything
  [[ $- != *i* ]] && return

  alias ls='ls --color=auto'
  PS1='[\u@\h \W]\$ '

  # Customization begins here
  export LD_LIBRARY_PATH=$HOME/.local/lib

  export PATH=$PATH:$HOME/.local/bin

  export EDITOR=mg

  source ~/.bash_env
#+end_src

This creates a .bash_env.example that should be renamed to .bash_env and filled out.
#+name: .bash_env
#+begin_src sh :tangle ~/.bash_env.example
  #!/bin/sh

  # This file is an example and should be renamed to .bash_env
  # Fill in values for each of the variables

  # server used by the backup script
  export BACKUP_SERVER=

  # location on the server where the backups should go
  export BACKUP_SERVER_PATH=

  # latitude and longitude used for redshift
  # use geonames.org to find a given locations latitude and longitude
  # example, using Louisville, KY lat/lon: `export RED_SHIFT_LAT_LONG=38.25424:-85.75941`
  export RED_SHIFT_LAT_LONG=
#+end_src

#+name: .profile
  #+begin_src sh :tangle ~/.profile
    export PATH=$PATH:$HOME/.local/bin
#+end_src
* Xmodmap
This turns the caps lock key into a control key. Sometimes this needs to be run manually after running xrandr. This can be a achieved with =xmodmap ~/.
#+name: .Xmodmap
#+begin_src conf :tangle ~/.Xmodmap
  clear lock
  clear control
  keycode 66 = Control_L
  add control = Control_L Control_R
#+end_src
* Xprofile
This starts up various programs I want to run at login
#+name: .xprofile
#+begin_src conf :tangle ~/.xprofile
  source ~/.bash_env

  xsetroot -solid "#3b6064"

  slstatus &

  xss-lock -- xlock &

  redshift -l $RED_SHIFT_LAT_LONG &

  emacs --fg-daemon &

  ./.xprofile-local
#+end_src

* Tmux
#+name: .tmux.conf
#+begin_src conf :tangle ~/.tmux.conf
  # Term
  set -g default-terminal screen-256color
  set -ag terminal-overrides ",xterm-256color:Tc"

  # ascii fallback for ACS
  #set-option -ga terminal-overrides ',*:enacs@:smacs@:rmacs@:acsc@'

  # start at index 1
  set -g base-index 1
  setw -g pane-base-index 1

  # Change prefix key
  unbind C-b
  set-option -g prefix C-t
  bind-key C-t send-prefix

  # Status Bar
  set-option -g status-style bg=red
  set-option -g renumber-windows on

  set -g mode-keys emacs
  set -g status-keys emacs
#+end_src
- If you want to change a running session to use emacs keys use =<PREFIX>:set-option status-keys emacs= and =<PREFIX>:set-option mode-keys emacs=.
* Git
All user information goes into the file .gitconfig-user, which is not part of this repo.
#+name: .gitconfig
#+begin_src conf :tangle ~/.gitconfig
  [include]
	  path = ~/.gitconfig-user

  [pull]
	  rebase = true
#+end_src
* kitty
#+name: kitty.conf
#+begin_src conf :tangle ~/.config/kitty/kitty.conf :mkdirp yes
  font_family      Hack
  bold_font        auto
  italic_font      auto
  bold_italic_font auto

  font_size 12.0
#+end_src
* dunst
#+name: dunstrc
#+begin_src conf :tangle ~/.config/dunst/dunstrc :mkdirp yes
  [global]
      monitor = 0
      geometry = "300x5-30+20"
      font = Hack 14
      frame_color = "#aaaaaa"
      frame_width = 1
      min_icon_size = 16
      max_icon_size = 32
      padding = 8
      horizontal_padding = 8
      text_icon_padding = 8
      shrink = yes
      hide_duplicate_count = true
      stack_duplicates = true

  [urgency_low]
      background = "#000000"
      foreground = "#ffffff"
      timeout = 3

  [urgency_normal]
      background = "#000000"
      foreground = "#ffffff"
      timeout = 3

  [urgency_critical]
      background = "#900000"
      foreground = "#ffffff"
      frame_color = "#ff0000"
      timeout = 0
#+end_src
* Cd Ripping
** abcde
#+begin_src conf :tangle ~/.abcde.conf
  LOWDISK=y
  CDDBMETHOD=cddb
  #CDDBMETHOD=musicbrainz
  GLYRC=glyrc
  CDDBCOPYLOCAL="n"
  FLACENCODERSYNTAX=flac
  FLAC=flac
  FLACOPTS='-s -e -V -8'
  OUTPUTTYPE="flac"
  CDROMREADERSYNTAX=cdparanoia
  CDPARANOIA=cdparanoia
  CDPARANOIAOPTS="--never-skip=40"
  CDDISCID=cd-discid
  OUTPUTDIR="$HOME/unimported_music"
  ACTIONS=cddb,playlist,read,encode,tag,move,clean

  OUTPUTFORMAT='${OUTPUT}/${ARTISTFILE}-${ALBUMFILE}/${TRACKNUM}.${TRACKFILE}'
  VAOUTPUTFORMAT='${OUTPUT}/Various-${ALBUMFILE}/${TRACKNUM}.${ARTISTFILE}-${TRACKFILE}'

  ONETRACKOUTPUTFORMAT='${OUTPUT}/${ARTISTFILE}-${ALBUMFILE}/${ALBUMFILE}'
  VAONETRACKOUTPUTFORMAT='${OUTPUT}/Various-${ALBUMFILE}/${ALBUMFILE}'

  PLAYLISTFORMAT='${OUTPUT}/${ARTISTFILE}-${ALBUMFILE}/${ALBUMFILE}.m3u'
  VAPLAYLISTFORMAT='${OUTPUT}/Various-${ALBUMFILE}/${ALBUMFILE}.m3u'

  mungefilename ()
  {
    echo "$@" | sed -e 's/^\.*//' -e 's/ /_/g' | tr -d ":><|*/\"'?[:cntrl:]"
  }

  MAXPROCS=2
  PADTRACKS=y
  EXTRAVERBOSE=2
  EJECTCD=y
#+end_src
** beets
#+begin_src conf :tangle ~/.config/beets/config.yaml :mkdirp yes
  directory: ~/music/
  library: ~/.config/beets/data/library.db
  import:
    move: yes
  plugins: fetchart ftintitle smartplaylist random

#+end_src
- After tangling the above config you might need to install the python requests libary =pip install requests=
- Additionally you might need to create the data dir inside the beets folder =mkdir -p ~/.config/beets/data=
