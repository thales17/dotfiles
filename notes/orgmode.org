#+title: notes/orgmode
<2022-01-28 Fri>
* Plotting Data
- You need =gnuplot= and the =gnuplot= emacs package installed
- To plot the below example table from the manual use =C-c " g=
- This will open gnuplot and bring up an interactive graph
#+PLOT: title:"Citas" ind:1 deps:(3) type:2d with:histograms set:"yrange [0:]" :file plot.png
| Sede      | Max cites | H-index |
|-----------+-----------+---------|
| Chile     |    257.72 |   21.39 |
| Leeds     |    165.77 |   19.68 |
| Sao Paolo |     71.00 |   11.50 |
| Stockholm |    134.19 |   14.33 |
| Morelia   |    257.56 |   17.67 |
* Using Babel to Export Plots
- [[https://www.orgmode.org/worg/org-contrib/babel/languages/ob-doc-gnuplot.html][Worg: Org-babel-gnuplot]]
- Before this will work you need to enable =gnuplot= in the =org-babel-load-languages= variable

#+tblname: data-table
| x | y1 | y2 |
|---+----+----|
| 0 |  3 |  6 |
| 1 |  4 |  7 |
| 2 |  5 |  8 |
| 3 |  3 |  6 |
| 4 |  4 |  7 |
| 5 |  5 |  8 |

#+begin_src gnuplot :exports both :var data=data-table :file example_plot.png
  set title "Example Org Babel Plot"
  set xlabel "X Axis"
  set ylabel "Y Axis"
  plot data using 1:2 with lp lw 2 title 'Series 1', \
       data using 1:3 with lp lw 2 title 'Series 2'
#+end_src
#+RESULTS:
[[file:example_plot.png]]
* Editing the Structure
- =C-c C->= can be used to demote (add more stars) to an entire subtree
- Similarly =C-c C-<= can be use to promote an entire subtree
* Publishing
- This section walks through how this org repository is published into an html site
** CSS
#+begin_src css :tangle ../css/main.css :mkdirp yes
  .org-doc { color: blue; }
  .org-keyword { color: red; }
  .org-string { color: green; }
  .org-variable-name { color: black; font-weight: bold; }
  .org-function-name { color: mediumblue; }
  .org-constant { color: purple; }
  .org-comment { color: darkcyan; }
  .org-type { color: orange; font-weight: bold; }
  .org-warning { color: red; }
  .timestamp { color: black; font-size: smaller; }
  .timestamp { text-decoration: underline; }
  .timestamp:before { content: "Last Updated: "; }

  @media only screen and (min-width: 1008px) {
      #table-of-contents {
	  position: fixed;
	  left: 1em;
	  top: 1em;
	  bottom: 0;
	  max-width: 25em;
	  font-size: small;
	  overflow-x: hidden;
	  overflow-y: auto;
      }

      #content {
	  margin: auto auto auto 26em;
      }
  }
#+end_src

** Publish Script
- [[https://orgmode.org/worg/org-tutorials/org-publish-html-tutorial.html][Worg: Org Publish HTML Tutorial]]
*** Straight.el
**** Setup
#+begin_src elisp :tangle ../build-site.el
  (defvar bootstrap-version)
  (let ((bootstrap-file
	 (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
	(bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
	  (url-retrieve-synchronously
	   "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
	   'silent 'inhibit-cookies)
	(goto-char (point-max))
	(eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  (setq straight-base-dir ".packages/")
#+end_src
**** Packages
#+begin_src elisp :tangle ../build-site.el
  (straight-use-package 'htmlize)
#+end_src

*** Ox Publish
**** Setup
- This disables the xhtml validation link and post amble
- I also create a head extra that includes the custom CSS
- To get syntax highlighting for source code blocks I set the =htmlize= output type to CSS
#+begin_src elisp :tangle ../build-site.el
  (require 'ox-publish)

  (setq org-html-validation-link nil)
  (setq org-html-postamble nil)
  (setq ajr-html-head-extra
	(concat
	 "<link rel='stylesheet' href='/css/main.css' />\n"))

  (setq org-html-htmlize-output-type 'css)
#+end_src

**** Publish Project Alist
#+begin_src elisp :tangle ../build-site.el
  (setq org-publish-project-alist
	(list
	 (list "org-site"
	       :recursive t
	       :base-directory "./"
	       :publishing-directory "./public"
	       :html-head-extra ajr-html-head-extra
	       :publishing-function 'org-html-publish-to-html)
	 (list "org-static"
	       :recursive t
	       :base-directory "./"
	       :base-extension "css\\|png\\|gif\\|jpg\\|jpeg"
	       :publishing-directory "./public"
	       :publishing-function 'org-publish-attachment)))
#+end_src

**** Actually Publishing
#+begin_src elisp :tangle ../build-site.el
(org-publish-all t)

(message "Build Complete")
#+end_src
** Appearance
*** Pretty Entities
- You can toggle pretty entities with =org-toggle-pretty-entites=
- This will render ordinals and exponents using superscripts
  - If enabled these should have superscripts, 1^{st} and x^{y}
  - This is an example of superscript syntax, =x^{3}=
* Graphviz
- [[https://www.orgmode.org/worg/org-contrib/babel/languages/ob-doc-dot.html][Worg: Dot Source Code Blocks in Org Mode]]
- [[https://www.graphviz.org/doc/info/lang.html][Grapviz DOT Language Documentation]]
- Graphviz is a tool that compiles graph descriptions in the =dot= language into images
- Org mode ships with =dot= language support, it just needs to be enabled with =org-babel-load-languages=
- For an emacs major mode that supports graphviz use [[https://github.com/ppareit/graphviz-dot-mode][graphviz-dot-mode]]
- Graphviz has a new layout engines: dot, neato, fdp etc.
- To set the layout engine use =:cmd <LAYOUT_ENGINE>= in the header args of a graphviz, for example =:cmd neato= will use the neato layout engine
- The differences between the layouts is documented [[http://graphviz.org/docs/layouts/][here]].
#+begin_src dot :cmd neato :file example_graphviz.png :exports both
  digraph {
      a->b;
      b->c;
      c->b;
      c->a;
  }
#+end_src

#+RESULTS:
[[file:example_graphviz.png]]
