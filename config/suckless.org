* dwm
Make sure you run =cd ~/src/dwm && sudo make install= after tangling  
#+name: dwm/config.h
#+begin_src c :noweb yes :tangle ~/src/dwm/config.h
  /* See LICENSE file for copyright and license details. */

  /* appearance */
  static const unsigned int borderpx  = 1;        /* border pixel of windows */
  static const unsigned int snap      = 32;       /* snap pixel */
  static const int showbar            = 1;        /* 0 means no bar */
  static const int topbar             = 1;        /* 0 means bottom bar */
  static const char *fonts[]          = { "Hack:size=12" };
  static const char dmenufont[]       = "Hack:size=12";
  static const char col_gray1[]       = "#3b6064";
  static const char col_gray2[]       = "#364958";
  static const char col_gray3[]       = "#bbbbbb";
  static const char col_gray4[]       = "#000000";
  static const char col_cyan[]        = "#87bba2";
  static const char *colors[][3]      = {
	  /*               fg         bg         border   */
	  [SchemeNorm] = { col_gray3, col_gray1, col_gray2 },
	  [SchemeSel]  = { col_gray4, col_cyan,  col_cyan  },
  };

  /* tagging */
  static const char *tags[] = { "1", "2", "3", "4", "5", "6", "7", "8", "9" };

  static const Rule rules[] = {
	  /* xprop(1):
	   ,*	WM_CLASS(STRING) = instance, class
	   ,*	WM_NAME(STRING) = title
	   ,*/
	  /* class      instance    title       tags mask     isfloating   monitor */
	  { "Gimp",     NULL,       NULL,       0,            1,           -1 },
	  { "guile3",  NULL,       NULL,       0,            1,           -1 },
	  { "Peek",  NULL,       NULL,       0,            1,           -1 },
	  { NULL,  NULL,       "mercury",       0,            1,           -1 },	
  };

  /* layout(s) */
  static const float mfact     = 0.55; /* factor of master area size [0.05..0.95] */
  static const int nmaster     = 1;    /* number of clients in master area */
  static const int resizehints = 1;    /* 1 means respect size hints in tiled resizals */
  static const int lockfullscreen = 1; /* 1 will force focus on the fullscreen window */

  static const Layout layouts[] = {
	  /* symbol     arrange function */
	  { "[]=",      tile },    /* first entry is default */
	  { "><>",      NULL },    /* no layout function means floating behavior */
	  { "[M]",      monocle },
  };

  /* key definitions */
  #define MODKEY Mod4Mask
  #define TAGKEYS(KEY,TAG) \
	  { MODKEY,                       KEY,      view,           {.ui = 1 << TAG} }, \
	  { MODKEY|ControlMask,           KEY,      toggleview,     {.ui = 1 << TAG} }, \
	  { MODKEY|ShiftMask,             KEY,      tag,            {.ui = 1 << TAG} }, \
	  { MODKEY|ControlMask|ShiftMask, KEY,      toggletag,      {.ui = 1 << TAG} },

  /* helper for spawning shell commands in the pre dwm-5.0 fashion */
  #define SHCMD(cmd) { .v = (const char*[]){ "/bin/sh", "-c", cmd, NULL } }

  /* commands */
  static char dmenumon[2] = "0"; /* component of dmenucmd, manipulated in spawn() */
  static const char *dmenucmd[] = { "dmenu_run", "-m", dmenumon, "-fn", dmenufont, "-nb", col_gray1, "-nf", col_gray3, "-sb", col_cyan, "-sf", col_gray4, NULL };
  static const char *termcmd[]  = { "kitty", NULL };

  static Key keys[] = {
	  /* modifier                     key        function        argument */
	  { MODKEY,                       XK_p,      spawn,          {.v = dmenucmd } },
	  { MODKEY|ShiftMask,             XK_Return, spawn,          {.v = termcmd } },
	  { MODKEY,                       XK_b,      togglebar,      {0} },
	  { MODKEY,                       XK_j,      focusstack,     {.i = +1 } },
	  { MODKEY,                       XK_k,      focusstack,     {.i = -1 } },
	  { MODKEY,                       XK_i,      incnmaster,     {.i = +1 } },
	  { MODKEY,                       XK_d,      incnmaster,     {.i = -1 } },
	  { MODKEY,                       XK_h,      setmfact,       {.f = -0.05} },
	  { MODKEY,                       XK_l,      setmfact,       {.f = +0.05} },
	  { MODKEY,                       XK_Return, zoom,           {0} },
	  { MODKEY,                       XK_Tab,    view,           {0} },
	  { MODKEY|ShiftMask,             XK_c,      killclient,     {0} },
	  { MODKEY,                       XK_t,      setlayout,      {.v = &layouts[0]} },
	  { MODKEY,                       XK_f,      setlayout,      {.v = &layouts[1]} },
	  { MODKEY,                       XK_m,      setlayout,      {.v = &layouts[2]} },
	  { MODKEY,                       XK_space,  setlayout,      {0} },
	  { MODKEY|ShiftMask,             XK_space,  togglefloating, {0} },
	  { MODKEY,                       XK_0,      view,           {.ui = ~0 } },
	  { MODKEY|ShiftMask,             XK_0,      tag,            {.ui = ~0 } },
	  { MODKEY,                       XK_comma,  focusmon,       {.i = -1 } },
	  { MODKEY,                       XK_period, focusmon,       {.i = +1 } },
	  { MODKEY|ShiftMask,             XK_comma,  tagmon,         {.i = -1 } },
	  { MODKEY|ShiftMask,             XK_period, tagmon,         {.i = +1 } },
	  TAGKEYS(                        XK_1,                      0)
	  TAGKEYS(                        XK_2,                      1)
	  TAGKEYS(                        XK_3,                      2)
	  TAGKEYS(                        XK_4,                      3)
	  TAGKEYS(                        XK_5,                      4)
	  TAGKEYS(                        XK_6,                      5)
	  TAGKEYS(                        XK_7,                      6)
	  TAGKEYS(                        XK_8,                      7)
	  TAGKEYS(                        XK_9,                      8)
	  { MODKEY|ShiftMask,             XK_q,      quit,           {0} },
  };

  /* button definitions */
  /* click can be ClkTagBar, ClkLtSymbol, ClkStatusText, ClkWinTitle, ClkClientWin, or ClkRootWin */
  static Button buttons[] = {
	  /* click                event mask      button          function        argument */
	  { ClkLtSymbol,          0,              Button1,        setlayout,      {0} },
	  { ClkLtSymbol,          0,              Button3,        setlayout,      {.v = &layouts[2]} },
	  { ClkWinTitle,          0,              Button2,        zoom,           {0} },
	  { ClkStatusText,        0,              Button2,        spawn,          {.v = termcmd } },
	  { ClkClientWin,         MODKEY,         Button1,        movemouse,      {0} },
	  { ClkClientWin,         MODKEY,         Button2,        togglefloating, {0} },
	  { ClkClientWin,         MODKEY,         Button3,        resizemouse,    {0} },
	  { ClkTagBar,            0,              Button1,        view,           {0} },
	  { ClkTagBar,            0,              Button3,        toggleview,     {0} },
	  { ClkTagBar,            MODKEY,         Button1,        tag,            {0} },
	  { ClkTagBar,            MODKEY,         Button3,        toggletag,      {0} },
  };
#+end_src
* slstatus
Make sure you run =cd ~/src/slstatus && sudo make install= after tangling    
#+name: slstatus/config.h
#+begin_src c :noweb yes :tangle ~/src/slstatus/config.h
  /* See LICENSE file for copyright and license details. */

  /* interval between updates (in ms) */
  const unsigned int interval = 1000;

  /* text to show if no value can be retrieved */
  static const char unknown_str[] = "n/a";

  /* maximum output string length */
  #define MAXLEN 2048

  /*
   ,* function            description                     argument (example)
   ,*
   ,* battery_perc        battery percentage              battery name (BAT0)
   ,*                                                     NULL on OpenBSD/FreeBSD
   ,* battery_state       battery charging state          battery name (BAT0)
   ,*                                                     NULL on OpenBSD/FreeBSD
   ,* battery_remaining   battery remaining HH:MM         battery name (BAT0)
   ,*                                                     NULL on OpenBSD/FreeBSD
   ,* cpu_perc            cpu usage in percent            NULL
   ,* cpu_freq            cpu frequency in MHz            NULL
   ,* datetime            date and time                   format string (%F %T)
   ,* disk_free           free disk space in GB           mountpoint path (/)
   ,* disk_perc           disk usage in percent           mountpoint path (/)
   ,* disk_total          total disk space in GB          mountpoint path (/")
   ,* disk_used           used disk space in GB           mountpoint path (/)
   ,* entropy             available entropy               NULL
   ,* gid                 GID of current user             NULL
   ,* hostname            hostname                        NULL
   ,* ipv4                IPv4 address                    interface name (eth0)
   ,* ipv6                IPv6 address                    interface name (eth0)
   ,* kernel_release      `uname -r`                      NULL
   ,* keyboard_indicators caps/num lock indicators        format string (c?n?)
   ,*                                                     see keyboard_indicators.c
   ,* keymap              layout (variant) of current     NULL
   ,*                     keymap
   ,* load_avg            load average                    NULL
   ,* netspeed_rx         receive network speed           interface name (wlan0)
   ,* netspeed_tx         transfer network speed          interface name (wlan0)
   ,* num_files           number of files in a directory  path
   ,*                                                     (/home/foo/Inbox/cur)
   ,* ram_free            free memory in GB               NULL
   ,* ram_perc            memory usage in percent         NULL
   ,* ram_total           total memory size in GB         NULL
   ,* ram_used            used memory in GB               NULL
   ,* run_command         custom shell command            command (echo foo)
   ,* separator           string to echo                  NULL
   ,* swap_free           free swap in GB                 NULL
   ,* swap_perc           swap usage in percent           NULL
   ,* swap_total          total swap size in GB           NULL
   ,* swap_used           used swap in GB                 NULL
   ,* temp                temperature in degree celsius   sensor file
   ,*                                                     (/sys/class/thermal/...)
   ,*                                                     NULL on OpenBSD
   ,*                                                     thermal zone on FreeBSD
   ,*                                                     (tz0, tz1, etc.)
   ,* uid                 UID of current user             NULL
   ,* uptime              system uptime                   NULL
   ,* username            username of current user        NULL
   ,* vol_perc            OSS/ALSA volume in percent      mixer file (/dev/mixer)
   ,*                                                     NULL on OpenBSD
   ,* wifi_perc           WiFi signal in percent          interface name (wlan0)
   ,* wifi_essid          WiFi ESSID                      interface name (wlan0)
   ,*/
  static const struct arg args[] = {
	  /* function format          argument */
	  { datetime, "%s | ",           "%F %r" },
	  { battery_perc, "BAT: %s%%",    "BAT0" },
  };

#+end_src
