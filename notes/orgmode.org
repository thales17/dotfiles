#+title: notes/orgmode
#+exclude_tags: noexport
<2022-04-27 Wed>
* Plotting Data
- You need =gnuplot= and the =gnuplot= emacs package installed
- To plot the below example table from the manual use =C-c " g=
- This will open gnuplot and bring up an interactive graph
#+PLOT: title:"Citas" ind:1 deps:(3) type:2d with:histograms set:"yrange [0:]" :file plot.png
| Sede      | Max cites | H-index |
|-----------+-----------+---------|
| Chile     |    257.72 |   21.39 |
| Leeds     |    165.77 |   19.68 |
| Sao Paolo |     71.00 |   11.50 |
| Stockholm |    134.19 |   14.33 |
| Morelia   |    257.56 |   17.67 |
* Using Babel to Export Plots
- [[https://www.orgmode.org/worg/org-contrib/babel/languages/ob-doc-gnuplot.html][Worg: Org-babel-gnuplot]]
- Before this will work you need to enable =gnuplot= in the =org-babel-load-languages= variable

#+tblname: data-table
| x | y1 | y2 |
|---+----+----|
| 0 |  3 |  6 |
| 1 |  4 |  7 |
| 2 |  5 |  8 |
| 3 |  3 |  6 |
| 4 |  4 |  7 |
| 5 |  5 |  8 |

#+begin_src gnuplot :exports both :var data=data-table :file example_plot.png
set title "Example Org Babel Plot"
set xlabel "X Axis"
set ylabel "Y Axis"
plot data using 1:2 with lp lw 2 title 'Series 1', \
     data using 1:3 with lp lw 2 title 'Series 2'
#+end_src
#+RESULTS:
[[file:example_plot.png]]
* Editing the Structure
- =C-c C->= can be used to demote (add more stars) to an entire subtree
- Similarly =C-c C-<= can be use to promote an entire subtree
* Publishing
- This section walks through how this org repository is published into an html site
** Appearance
*** Pretty Entities
- You can toggle pretty entities with =org-toggle-pretty-entites=
- This will render ordinals and exponents using superscripts
  - If enabled these should have superscripts, 1^{st} and x^{y}
  - This is an example of superscript syntax, =x^{3}=
* Graphviz
- [[https://www.orgmode.org/worg/org-contrib/babel/languages/ob-doc-dot.html][Worg: Dot Source Code Blocks in Org Mode]]
- [[https://www.graphviz.org/doc/info/lang.html][Grapviz DOT Language Documentation]]
- [[https://renenyffenegger.ch/notes/tools/Graphviz/examples/index][Rene Nyffenegger: Graphviz Examples]]
- Graphviz is a tool that compiles graph descriptions in the =dot= language into images
- Org mode ships with =dot= language support, it just needs to be enabled with =org-babel-load-languages=
- For an emacs major mode that supports graphviz use [[https://github.com/ppareit/graphviz-dot-mode][graphviz-dot-mode]]
- Graphviz has a new layout engines: dot, neato, fdp etc.
- To set the layout engine use =:cmd <LAYOUT_ENGINE>= in the header args of a graphviz, for example =:cmd neato= will use the neato layout engine
- The differences between the layouts is documented [[http://graphviz.org/docs/layouts/][here]].
#+begin_src dot :cmd neato :file example_graphviz.png :exports both
  digraph {
      a->b;
      b->c;
      c->b;
      c->a;
  }
#+end_src

#+RESULTS:
[[file:example_graphviz.png]]
* LaTex
- To view the Embedded LaTex section of the manual execute:
#+begin_src elisp
(info "(org) Embedded LaTex")
#+end_src
- [[https://orgmode.org/worg/org-contrib/babel/languages/ob-doc-LaTeX.html][Worg: LaTex Source Code Blocks in Org Mode]]
- [[https://www.gnu.org/software/auctex/][AucTeX]] is an Emacs major mode for editing LaTex
- You will need a texlive distribution (like =texlive-most= on Arch Linux) installed on your system to access the LaTex programs
- In order to export to SVG you need to have =inkscape= installed on your computer
- Ensure that LaTex is added to the =org-babel-load-languages=
** Hello World
#+name: hello-world
#+BEGIN_SRC latex :exports both :file hello-latex.svg :buffer no
  (a + b)^2 = a^2 +2ab + b^2
#+END_SRC
[[file:hello-latex.svg]]
** TikZ
- [[https://www.homepages.ucl.ac.uk/~ucahjde/blog/tikz.html][TikZ and org-mode]]
* PlantUML
** Setup
- [[https://plantuml.com/emacs][PlantUML: Integration with Emacs]]
- Install the =plantuml-mode= package from MELPA
  - With =straight.el= ~(straight-use-package 'plantuml-mode)~
- Download the latest PlantUML jar file from the [[https://github.com/plantuml/plantuml/releases][Github releases]] page
- Save it to a known location, for example =~/jars/plantuml-1.2022.1.jar=
- Set the emacs variable =org-plantuml-jar-path= to the location of the jar file
#+begin_src elisp
(setq org-plantuml-jar-path
      (expand-file-name "~/jars/plantuml-1.2022.1.jar"))
#+end_src
- Enable =plantuml= in the =org-babel-load-languages=
** Example
- The example diagram was borrowed from: [[https://github.com/mattjhayes/PlantUML-Examples/blob/master/docs/Diagram-Types/source/class-diagram.md][Github mattjhayes: PlantUML Examples]]

#+begin_src plantuml :file plantuml_example.png :exports both
@startuml
skinparam shadowing false

title Class Diagram Example

skinparam class {
    BackgroundColor #94de5e
    ArrowColor #darkblue
    BorderColor black
}

class Vehicle {
	speed
    direction
	make
    model
	run()
}
class Car {
    driver_name
    road
	run()
}
class Plane {
    pilot_name
    altitude
	run()
}
class Ship {
    captain_name
    ocean
	run()
}
Vehicle <|-- Car
Vehicle <|-- Plane : inherits
Vehicle <|-- Ship

legend
    <size:18>Key</size>
    |<#94de5e> Class |
endlegend
@enduml
#+end_src

#+RESULTS:
[[file:plantuml_example.png]]
** Database Example
- [[https://raphael-leger.medium.com/automatically-generating-up-to-date-database-diagrams-with-typeorm-d1279a20545e][Raphael Leger: SQL + PlantUML: Generate Automatic Database Diagrams]]
#+begin_src plantuml :file plantuml_sql_example.png :exports both
@startuml
!define primary_key(x) <b><color:#b8861b><&key></color> x</b>
!define foreign_key(x) <color:#aaaaaa><&key></color> x
!define column(x) <color:#efefef><&media-record></color> x
!define table(x) entity x << (T, white) >>

left to right direction
skinparam roundcorner 5
skinparam linetype ortho
skinparam shadowing false
skinparam handwritten false
skinparam class {
    BackgroundColor white
    ArrowColor #2688d4
    BorderColor #2688d4
}

table( user ) {
  primary_key( id ): UUID
  column( isActive ): BOOLEAN
  foreign_key( cityId ): INTEGER <<FK>>
}

table( city ) {
  primary_key( id ): UUID
  column( name ): CHARACTER VARYING
  column( country ): CHARACTER VARYING
  column( postCode ): INTEGER
}

user }|--|| city

@enduml
#+end_src

#+RESULTS:
[[file:plantuml_sql_example.png]]
