:properties:
:header-args: :tangle ~/.emacs :results none
:end:
#+title: Emacs Config
<2022-09-21 Wed>
* Early Init
Disable package.el since I use straight.el
#+begin_src elisp :tangle ~/.config/emacs/early-init.el :mkdirp yes
(setq package-enable-at-startup nil)
#+end_src
* Environment
Set various environment variables in emacs
#+begin_src elisp
(setenv "LD_LIBRARY_PATH"
	(concat
	 (getenv "HOME")
	 "/.local/lib"))
#+end_src
* Dired Mode
A set of customizations to dired mode to make it a little easier to use
#+begin_src elisp
(require 'dired)
(setq dired-dwim-target t)
(setq dired-recursive-copies (quote always))
(setq dired-recursive-deletes (quote top))
(add-hook 'dired-mode-hook
	  (lambda ()
	    (dired-hide-details-mode)))

(let ((map dired-mode-map))
  (define-key map (kbd "C-b") #'bongo-dired-append-enqueue-lines))
#+end_src
* Alt Key
This allows the alt key to work as meta
#+begin_src elisp
(setq x-alt-keysym 'meta)
#+end_src
* Visual line mode in text mode
This ensures that visual line mode is enabled by default for all major modes that derive from text-mode
#+begin_src elisp
(add-hook 'text-mode-hook 'turn-on-visual-line-mode)
#+end_src
* Packages
** Setup straight.el
This code is from the straight.el README.md in the github repo [[https://github.com/raxod502/straight.el][straight.el]]
#+begin_src elisp
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
	(url-retrieve-synchronously
	 "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
	 'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
#+end_src
*** Upgrading
- =M-x straight-pull-all= or =M-x straight-pull-package=
- The packages will be rebuilt when you restart emacs or you can run =M-x straight-check-all= to rebuild them, (its probably better to restart emacs to clean the old version out)
** Package List
#+begin_src elisp
(straight-use-package 'magit)
(straight-use-package 'counsel)
(straight-use-package 'hydra)
(straight-use-package 'ivy-hydra)
(straight-use-package 'ace-window)
(straight-use-package 'avy)
(straight-use-package 'markdown-mode)
(straight-use-package 'geiser)
(straight-use-package 'geiser-guile)
(straight-use-package 'bongo)
(straight-use-package 'speed-type)
(straight-use-package 'paredit)
(straight-use-package 'password-store)
(straight-use-package 'password-store-otp)
(straight-use-package 'lua-mode)
(straight-use-package 'notmuch)
(straight-use-package 'yasnippet)
(straight-use-package 'yasnippet-snippets)
(straight-use-package 'yafolding)
(straight-use-package 'coterm)
(straight-use-package 'pulseaudio-control)
(straight-use-package 'yaml-mode)
(straight-use-package 'ledger-mode)
(straight-use-package 'slime)
(straight-use-package 'sunshine)
(straight-use-package 'gnuplot)
(straight-use-package 'graphviz-dot-mode)
(straight-use-package 'go-mode)
(straight-use-package 'ob-go)
(straight-use-package 'olivetti)
(straight-use-package 'auctex)
(straight-use-package 'lsp-mode)
(straight-use-package 'flycheck)
(straight-use-package 'company)
(straight-use-package 'lsp-ui)
(straight-use-package 'sudoku)
(straight-use-package 'plantuml-mode)
(straight-use-package 'kotlin-mode)
(straight-use-package 'ef-themes)
(straight-use-package 'restclient)
(straight-use-package 'which-key)
(straight-use-package 'dart-mode)
(straight-use-package 'eglot)
#+end_src
* Personal Elisp Files
** shelllike filter
This is a process filter that handles carriage returns and newlines. From this, [[https://stackoverflow.com/questions/19407278/emacs-overwrite-with-carriage-return][using process filter for carriage returns]], stack overflow.
#+name: shelllike-filter
#+begin_src elisp :tangle ~/.emacs.d/ajr.el :mkdirp yes
(defun ajr-shelllike-filter (proc string)
  (let* ((buffer (process-buffer proc))
	 (window (get-buffer-window buffer)))
    (with-current-buffer buffer
      (if (not (mark)) (push-mark))
      (exchange-point-and-mark) ;Use the mark to represent the cursor location
      (dolist (char (append string nil))
	(cond ((char-equal char ?\r)
	       (move-beginning-of-line 1))
	      ((char-equal char ?\n)
	       (move-end-of-line 1) (newline))
	      (t
	       (if (/= (point) (point-max)) ;Overwrite character
		   (delete-char 1))
	       (insert char))))
      (exchange-point-and-mark))
    (if window
	(with-selected-window window
	  (goto-char (point-max))))))
#+end_src

** Start Process in Buffer
#+begin_src elisp :tangle ~/.emacs.d/ajr.el :mkdirp yes
(defun ajr-start-process-in-buffer (buffer-name
				    program-name
				    program
				    &optional program-dir
				    initial-message
				    &rest program-args)
  "Starts a process in buffer with BUFFER-NAME. If an optional
INITIAL-MESSAGE is supplied it will be added to the beginning of the
buffer. If you pass the optional PROGRAM-DIR this will change to the
argument directory before starting the program. The final arugments
will be pass as PROGRAM-ARGS to the PROGRAM."
  (with-current-buffer (generate-new-buffer buffer-name)
    (special-mode)
    (setq buffer-read-only nil)
    (when initial-message
      (insert initial-message)
      (newline))
    (when program-dir
      (cd program-dir))
    (let ((proc (apply 'start-process
		       (append
			(list
			 program-name
			 (current-buffer)
			 program)
			program-args))))
      (set-process-filter proc 'ajr-shelllike-filter)
      (pop-to-buffer (current-buffer)))))
#+end_src

*** Example Usage
#+begin_src elisp :tangle no
(ajr-start-process-in-buffer
 "*ajr-process-example*"
 "lsblk"
 "lsblk"
 nil
 "This is an example of using the start process
in buffer function.
---------------------------------------------"
 "-t")
#+end_src

** org capture
#+name: org-capture
#+begin_src elisp :tangle ~/.emacs.d/ajr.el :mkdirp yes
(defun ajr-org-basic-capture (key name filename)
  "Generates a basic capture template. It will
  prompt you for the title of the heading and place
  the point in the body of the heading. KEY is the
  character that needs to be pressed in org capture
  to use this template. NAME is the name of the capture
  template. FILENAME is which org file in your org-directory."
  (list key name 'entry
	(list 'file+headline filename name)
	"* %^{Title?}\n%?"))
#+end_src

** web search
#+name: web-search
#+begin_src elisp :tangle ~/.emacs.d/ajr.el :mkdirp yes
(defun ajr-search-web (term)
  "Prompts the user for a search TERM. Searches
  duckduckgo with eww for the term. Inspired by
  https://gist.github.com/brenns10/69d39f6c46170093f73d"
  (interactive "MSearch Web: ")
  (eww (format "https://html.duckduckgo.com/html/?q=%s"
	       (url-hexify-string term))))
#+end_src

** mail
#+name: mail
#+begin_src elisp :tangle ~/.emacs.d/ajr.el :mkdirp yes
(defcustom ajr-sync-mail-program
  "syncmail"
  "Program that syncs mail and updates notmuch")

(defun ajr-sync-mail ()
  "Starts a process name `syncmail' and sends the output to
  a special mode buffer. This will pop to the buffer as the
  process is running."
  (interactive)
  (ajr-start-process-in-buffer
   "*syncmail*"
   "syncmail"
   ajr-sync-mail-program))
#+end_src

** music
#+name: music
#+begin_src elisp :tangle ~/.emacs.d/ajr.el :mkdirp yes
(defcustom ajr-music-dir
  (concat (getenv "HOME")
	  "/music")
  "Directory where your music is kept.")

(defconst ajr--no-dot-regexp
  "^[^\\.].+$"
  "Only matches files that do not start with a dot")

(defun ajr--dir-subdirs (directory)
  "Returns the list of sub dirs inside the argument DIRECTORY.
  Ignores directories that start with a `.' "
  (mapcar 'car (seq-filter (lambda (f-or-d)
			     (not (eq (nth 1 f-or-d)
				      nil)))
			   (directory-files-and-attributes directory
							   nil
							   ajr--no-dot-regexp))))

(defun ajr--all-albums ()
  "Returns a list of pairs of all available albums `(ARTIST . ALBUM)'"
  (let ((artists (ajr--dir-subdirs ajr-music-dir)))
    (mapcan (lambda (artist)
	      (let ((artist-path (string-join
				  (list ajr-music-dir
					"/" artist))))
		(mapcar (lambda (album)
			  `(,artist . ,album))

			(ajr--dir-subdirs artist-path))))
	    artists)))

(defun ajr--ask-album ()
  "Prompts the user to choose an album, returns `(ARTIST . ALBUM)"
  (let* ((albums (ajr--all-albums))
	 (album-display-names
	  (mapcar (lambda (album)
		    (format "%s - %s" (car album) (cdr album)))
		  albums))
	 (albums-alist (mapcar (lambda (n)
				 `(,(nth n album-display-names) .
				   ,(nth n albums)))
			       (number-sequence 0 (- (length albums) 1)))))

    (cdr (assoc (completing-read "Which album? "
				 album-display-names)
		albums-alist))))

(defun ajr--album-path (album)
  "Gets the path of an album from `(ARTIST . ALBUM)'"
  (string-join (list ajr-music-dir
		     "/"
		     (car album)
		     "/"
		     (cdr album))))

(defun ajr-bongo-play-album ()
  "Prompts the user for an album and starts playing it"
  (interactive)
  (let ((album (ajr--ask-album)))
    (with-bongo-playlist-buffer
      (bongo-stop)
      (bongo-erase-buffer)
      (bongo-insert-directory-tree (ajr--album-path album))
      (goto-char (point-min))
      (bongo-play))))
#+end_src
** podcasts
*** Variables
#+begin_src elisp :tangle ~/.emacs.d/ajr.el :mkdirp yes
(defcustom ajr-podcast-dir
  (concat (getenv "HOME")
	  "/podcasts")
  "Directory where your podcasts are kept.
  Used the `ajr-podcast-*' functions.")
#+end_src
*** Podcast dired
#+begin_src elisp :tangle ~/.emacs.d/ajr.el :mkdirp yes
(defun ajr-podcast-dired ()
  "Opens dired buffer to `ajr-podcast-dir' in other window"
  (interactive)
  (find-file-other-window ajr-podcast-dir))
#+end_src

** video
*** Variables
#+begin_src elisp :tangle ~/.emacs.d/ajr.el :mkdirp yes
(defcustom ajr-video-dir
  (concat (getenv "HOME")
	  "/videos")
  "Directory where your videos are kept.
  Used the `ajr-video-*' functions."
  :type 'directory)

(defcustom ajr-video-program
  "mpv"
  "Program used to play videos.
  This program should accept the path to the video as its argument."
  :type 'string)

(defcustom ajr-video-regexp
  ".+\\.\\(mp4\\|webm\\|mkv\\)$"
  "Only matches files ending in `mp4' or `webm' or `mkv'."
  :type 'regexp)

#+end_src
*** Prompt user for video
#+begin_src elisp :tangle ~/.emacs.d/ajr.el :mkdirp yes
(defun ajr--ask-video (is-by-date video-dir)
  (let ((videos (directory-files
		 video-dir
		 nil
		 ajr-video-regexp))
	(sorted-videos (mapcar 'car (sort
				     (directory-files-and-attributes
				      video-dir
				      nil
				      ajr-video-regexp)
				     (lambda (x y)
				       (time-less-p
					(file-attribute-modification-time (cdr y))
					(file-attribute-modification-time (cdr x))))))))

    (completing-read "Which video? " (if is-by-date
					 sorted-videos
				       videos))))

#+end_src

*** Video playback
#+begin_src elisp :tangle ~/.emacs.d/ajr.el :mkdirp yes
(defun ajr-video-play (arg &optional video-dir)
  "Prompts the user for a video from `ajr-video-dir'. If you pass a
`video-dir' in it will use that instead of `ajr-video-dir'. Uses the
`ajr-video-program' to play the video. Use C-u to sort the videos by
date (newest first)."
  (interactive "P")
  (let* ((vdir (or video-dir ajr-video-dir))
	 (video (ajr--ask-video arg vdir))
	 (video-buffer (get-buffer-create "*video-player*"))
	 (script-proc-buffer
	  (make-comint-in-buffer "video-player"
				 video-buffer
				 ajr-video-program
				 nil
				 (string-join (list vdir
						    "/"
						    video))))
	 (video-proc (get-buffer-process video-buffer)))
    (with-current-buffer video-buffer
      ;; If the buffer was previously in special mode,
      ;; need to set read only to false
      (setq buffer-read-only nil))
    (set-process-sentinel video-proc
			  (lambda (proc change)
			    (with-current-buffer (process-buffer proc)
			      (special-mode))))))
#+end_src

*** Video dired
#+begin_src elisp :tangle ~/.emacs.d/ajr.el :mkdirp yes
(defun ajr-video-dired ()
  "Opens dired buffer to `ajr-video-dir' in other window"
  (interactive)
  (find-file-other-window ajr-video-dir))
#+end_src

*** Video download
#+begin_src elisp :tangle ~/.emacs.d/ajr.el :mkdirp yes
(require 'url-util)
(defun ajr-video-youtube-dl-at-point ()
  (interactive)
  (let ((yt-url (url-get-url-at-point)))
    (ajr-start-process-in-buffer
     "*youtube-dl*"
     (format "youtube-dl %s" yt-url)
     "youtube-dl"
     ajr-video-dir
     yt-url
     "-f"
     "best[height<=1080]"
     yt-url)))
#+end_src

** mini scroll
Based on [[https://emacsnyc.org/2021/12/06/may-2021-lightning-talks.html][2021 Emacs lightning talk, "Transient Key Maps" - Zachary Kanfer]]
#+begin_src elisp :tangle ~/.emacs.d/ajr.el :mkdirp yes
(defvar ajr-mini-scroll-amount 5
  "Scroll lines used by ajr-mini-scroll.")

(defvar ajr-mini-scroll-map
  (let ((m (make-sparse-keymap)))
    (define-key m (kbd "<down>") 'ajr-mini-scroll-up)
    (define-key m (kbd "<up>") 'ajr-mini-scroll-down)
    m))

(defun ajr-mini-scroll (lines)
  "Scroll by `lines' lines"
  (interactive)
  (scroll-up lines)
  (set-transient-map ajr-mini-scroll-map))

(defun ajr-mini-scroll-down ()
  "Scroll down"
  (interactive)
  (ajr-mini-scroll (- ajr-mini-scroll-amount)))

(defun ajr-mini-scroll-up ()
  "Scroll up"
  (interactive)
  (ajr-mini-scroll ajr-mini-scroll-amount))
#+end_src

** Prompt before closing frame in daemon mode
Based on https://emacs.stackexchange.com/questions/30454/how-to-make-emacs-prompt-me-before-closing-the-last-emacs-gui-frame-when-running
#+begin_src elisp :tangle ~/.emacs.d/ajr.el :mkdirp yes
(defun ajr-ask-before-closing ()
  "Close frame only if y was pressed"
  (interactive)
  (if (y-or-n-p (format "Do you want to close this frame? "))
      (save-buffers-kill-terminal)
    (message "Ok")))

#+end_src

** Switch to Scratch
- Function that allows me to bind switching to the scratch buffer to a key
#+begin_src elisp :tangle ~/.emacs.d/ajr.el :mkdirp yes
(defun ajr-scratch ()
  "Switch to the scratch buffer"
  (interactive)
  (switch-to-buffer "*scratch*"))
#+end_src

** Add timestamp above first org heading
- These elisp functions add a timestamp above the first heading
- I use them for this repo specifically to know when I have last updated something
#+begin_src elisp :tangle ~/.emacs.d/ajr.el :mkdirp yes
(defun ajr-org-goto-first-heading()
  (goto-char (point-min))
  (unless (org-at-heading-p)
    (org-next-visible-heading 1)))

(defun ajr-org-add-edit-timestamp ()
  (save-excursion
    (ajr-org-goto-first-heading)
    (if (eq (line-number-at-pos) 1)
	(progn
	  (newline)
	  (previous-line))
      (progn
	(previous-line)
	(if (org-at-timestamp-p)
	    (kill-whole-line)
	  (next-line))
	(newline)
	(previous-line)))
    (org-insert-time-stamp (current-time))))
#+end_src

** View Android Screenshot
#+begin_src elisp :tangle ~/.emacs.d/ajr.el :mkdirp yes
(defun ajr-android-screenshot ()
  "Uses adb to capture a screencap of the connected device.
The screenshot is opened in the other window."
  (interactive)
  (let ((fname (expand-file-name
		(concat
		 "~/tmp/android-"
		 (format-time-string "%Y%m%d%H%M%S")
		 ".png"))))
    (shell-command
     (concat
      "adb exec-out screencap -p > "
      fname))
    (find-file-other-window fname)))
#+end_src

** ajr.el
 Load the personal elisp files in init file
 #+begin_src elisp
(load "~/.emacs.d/ajr")
 #+end_src

* Global Modes
#+begin_src elisp
  (yas-global-mode)
  (yafolding-mode)
  (add-hook 'prog-mode-hook 'display-line-numbers-mode)
  (add-hook 'prog-mode-hook 'company-mode)
  (add-hook 'prog-mode-hook 'hl-line-mode)
  (add-hook 'dart-mode-hook 'eglot-ensure)
  (add-hook 'go-mode-hook 'eglot-ensure)
  (coterm-mode)
  (which-key-mode 1)

  (require 'flymake)
#+end_src
* Completion
I use ivy for my completion framework
#+begin_src elisp
(ivy-mode)
#+end_src
* Global Hotkeys
** ivy
#+begin_src elisp
(global-set-key (kbd "C-M-s") 'swiper)
(global-set-key (kbd "C-M-j") 'avy-goto-char)
(global-set-key (kbd "C-c r") 'ivy-resume)
(global-set-key (kbd "M-x") 'counsel-M-x)
(global-set-key (kbd "C-x C-f") 'counsel-find-file)
(global-set-key (kbd "C-x b") 'counsel-switch-buffer)
#+end_src

** function keys
#+begin_src elisp
(global-set-key (kbd "<f6>") 'ajr-scratch)
(global-set-key (kbd "<f7>") 'shell)
(global-set-key (kbd "<f8>") 'compile)
(global-set-key (kbd "<f9>") 'whitespace-mode)
(global-set-key (kbd "<f10>") 'whitespace-cleanup)
(global-set-key (kbd "<f12>") 'comment-dwim)
#+end_src
** mail
#+begin_src elisp
(global-set-key (kbd "C-c n n") 'notmuch)
(global-set-key (kbd "C-c n u") 'ajr-sync-mail)
#+end_src

** password-store
#+begin_src elisp
(global-set-key (kbd "C-c p c") 'password-store-copy)
(global-set-key (kbd "C-c p o") 'password-store-otp-token-copy)
#+end_src
** music and podcasts
#+begin_src elisp
(define-key global-map (kbd "C-c m") (make-sparse-keymap))
(global-set-key (kbd "C-c m b") 'bongo-playlist)
(global-set-key (kbd "C-c m a") 'ajr-bongo-play-album)
(global-set-key (kbd "C-c m p") 'bongo-pause/resume)
(global-set-key (kbd "C-c m <right>") 'bongo-next)
(global-set-key (kbd "C-c m <left>") 'bongo-previous)
(global-set-key (kbd "C-c m c") 'ajr-podcast-dired)
#+end_src
** videos
#+begin_src elisp
(define-key global-map (kbd "C-c v") (make-sparse-keymap))
(global-set-key (kbd "C-c v p") 'ajr-video-play)
(global-set-key (kbd "C-c v b") 'ajr-video-dired)
(global-set-key (kbd "C-c v d") 'ajr-video-youtube-dl-at-point)
#+end_src
** org capture
#+begin_src elisp
(global-set-key (kbd "C-c l") 'org-store-link)
(global-set-key (kbd "C-c a") 'org-agenda)
(global-set-key (kbd "C-c c") 'org-capture)
#+end_src
** ace window
#+begin_src elisp
(global-set-key (kbd "M-o") 'other-window)
(global-set-key (kbd "C-x o") 'ace-window)
#+end_src
** yafolding
#+begin_src elisp
(global-set-key (kbd "C-<return>") 'yafolding-toggle-element)
#+end_src

** prompt before closing
#+begin_src elisp
(when (daemonp)
  (global-set-key (kbd "C-x C-c") 'ajr-ask-before-closing))
#+end_src
** misc
#+begin_src elisp
(global-set-key (kbd "C-x C-b") 'ibuffer)
(global-set-key (kbd "C-x w") 'webjump)
(global-set-key (kbd "C-c f") 'find-file-at-point)
(global-set-key (kbd "C-x l") 'slime-repl)
#+end_src
** Disable C-z
#+begin_src elisp
(global-unset-key (kbd "C-z"))
(global-unset-key (kbd "C-x C-z"))
#+end_src

** Flymake
#+begin_src elisp
(define-key flymake-mode-map (kbd "C-c f") (make-sparse-keymap))
(define-key flymake-mode-map (kbd "C-c f n") 'flymake-goto-next-error)
(define-key flymake-mode-map (kbd "C-c f p") 'flymake-goto-prev-error)
(define-key flymake-mode-map (kbd "C-c f a") 'flymake-show-project-diagnostics)
#+end_src

* Paredit
This enables paredit mode for various lisps
#+begin_src elisp
(autoload 'enable-paredit-mode "paredit"
  "Turn on pseudo-structural editing of Lisp code." t)
(add-hook 'emacs-lisp-mode-hook #'enable-paredit-mode)
(add-hook 'eval-expression-minibuffer-setup-hook #'enable-paredit-mode)
(add-hook 'lisp-mode-hook #'enable-paredit-mode)
(add-hook 'lisp-interaction-mode-hook #'enable-paredit-mode)
(add-hook 'scheme-mode-hook #'enable-paredit-mode)
#+end_src
* Org Mode
Customizations and global keys for org mode
#+begin_src elisp
(global-set-key (kbd "C-c l") 'org-store-link)
(global-set-key (kbd "C-c a") 'org-agenda)
(global-set-key (kbd "C-c c") 'org-capture)
#+end_src

#+begin_src elisp
  (setq org-capture-templates
	'(("t" "TODO")
	  ("ti" "Misc TODO" entry
	   (file+headline "todos.org" "Misc")
	   "* TODO %?\n"
	   :prepend t)))

#+end_src
* Before Save Hook
#+begin_src elisp
(defun ajr-eglot-format-before-save ()
  (when (eglot-managed-p)
    (eglot-format-buffer)))

(add-hook 'before-save-hook 'whitespace-cleanup)
(add-hook 'before-save-hook 'ajr-eglot-format-before-save)
#+end_src
* Bongo
#+begin_src elisp
(require 'bongo)
#+end_src
* Artist Mode
#+begin_src elisp
(add-hook 'artist-mode-hook
	  (lambda ()
	    (setq indent-tabs-mode nil)))
#+end_src
* js mode (JavaScript)
#+begin_src elisp
(add-hook 'js-mode-hook
	  (lambda ()
	    (setq indent-tabs-mode nil)))
#+end_src
* Emacs Server Mode
- You can enable the emacs server to start at login with =systemctl --user enable emacs=
- You can connect to the server with =emacsclient -c=
- The =-c= flag creates a new frame
- From the [[https://wiki.archlinux.org/title/Emacs#As_a_systemd_unit][ArchWiki]] when emacs is started from systemd it doesn't source =.bash_profile=
- Another option is the start it in your =.Xprofile= with =emacs --fg-daemon=
- This way would inherit the environment variables

* SLIME
** Inferior Lisp Program
#+begin_src elisp
(setq inferior-lisp-program "/usr/bin/sbcl")
#+end_src
** HyperSpec Path
- This sets the HyperSpec path to =~/docs/HyperSpec=
- [[http://snowsyn.net/2020/01/01/local-clhs-access-in-emacs/][Nicolas Martyanoff: Local CLHS access in Emacs]]
#+begin_src elisp
(setq common-lisp-hyperspec-root
  (concat "file://" (expand-file-name "~/docs/HyperSpec/")))
#+end_src

* Hydra
- Use the example hydra for zooming text
#+begin_src elisp
(require 'hydra)

(require 'ivy-hydra)

(defhydra hydra-zoom (global-map "<f2>")
  "zoom"
  ("g" text-scale-increase "in")
  ("l" text-scale-decrease "out"))
#+end_src
* Games
** asm-blox
- A really cool TIS-100 like game made for Emacs, [[https://github.com/zkry/asm-blox][asm-blox]]
#+begin_src elisp
(straight-use-package '(asm-blox :host github :repo "zkry/asm-blox"))
#+end_src
* Graphviz
- This sets up [[https://github.com/ppareit/graphviz-dot-mode][graphviz-dot-mode]]
#+begin_src elisp
(setq graphviz-dot-indent-width 4)
#+end_src
* EWW
- Start olivetti mode when using eww
#+begin_src elisp
(defun ajr-eww-setup ()
  (olivetti-mode)
  (text-scale-mode)
  (text-scale-increase 3))

(add-hook 'eww-mode-hook #'ajr-eww-setup)
#+end_src
* Org Mode
** Source Block Indentation
- This ensures that org-mode does not modify the indentation of a source block
#+begin_src elisp
(setq org-src-preserve-indentation t)
(setq org-src-tab-acts-natively t)
#+end_src

* Customizations
- Customizations should be stored in a separate file =~/.emacs-custom.el=
- This should be last to ensure that the =~/.emacs-custom.el= can do any local overrides that might be needed
- This should be loaded last to allow for overrides in the the =.emacs-custom.el=
#+begin_src elisp
  (setq custom-file "~/.emacs-custom.el")
  (load custom-file)
#+end_src
** Common Customizations
- =confirm-kill-emacs= - =y-or-n-p=
- Set the theme to =modus-vivendi= or =modus-operandi=
- Change the font to Hack 12 point
- Change the =variable-pitch= face to =Noto Serif=
- Set the =bongo-default-directory= to =~/music=
- Set the =bongo-enabled-backends= to =vlc=
- Change the =browse-url-browser-function= to ='eww-browse-url=
- Set the =efleed-sort-order= to ='ascending=
- Set the =initial-buffer-choice= to =~/=
- Set =menu-bar-mode= to =nil=
- Set =tool-bar-mode= to =nil=
- Set =tab-bar-show= to =nil=
- Set =visible-bell= to =t=
- Edit the =org-babel-load-languages= to enable: C, shell, ditaa, lisp
- Set =org-hide-emphasis-markers= to =t=
- Set =org-startup-folded= to ='content=
- Set =org-agenda-files= to =~/org=
- Set =save-place-mode= to =t=
- Set =shr-image-animate= to =nil= to disable animated gifs in shr
- Set =recenter-positions= to ='(top middle bottom)=
