#+title: projects/lisp/bullsandcows.org
Last Updated: <2022-01-08 Sat>

* Bulls and Cows
- This code cracking logic game similar to Mastermind
- The computer picks a random 4 digit number
- The player makes a guess as to what that 4 digit number is
- Each guess is scored by the number of "bulls" and "cows"
- A "bull" means that a digit is in the right position
- A "cow" means that the digit is in the string but not in the right position
- The score doesn't tell you which digit is a "bull" or "cow" only how many digits are each
- For example if the secret is =1234= and the player guesses =4130= the score would be =1B2C=, the =3= being the "bull" and the =4= and =1= being in the code but not in the correct position
- Another requirement of the secret code is that it has no repeating digits
- [[https://en.wikipedia.org/wiki/Bulls_and_Cows][Wikipedia: Bulls and Cows]]

* Project Scope
- This is a series of functions that allow you to play the game bulls and cows inside a common lisp REPL
- You will be able to play the number guessing game or invoke the solver to watch the computer guess the answer

* Implementation
** Setting up the game
- This code defines the game setup function and global variable =*secret-code*=
- The setup function, =bulls-cows-setup=, will generate a list of 4 random integers and store that in =*secret-code*=
- There secret code will not have the digit zero in it
- The algorithm for generating a random code without repeats is as follows:
  - Start with a list of all wanted digits and the length of the secret
  - Check the length of the secret, if =0= return =nil=
  - Pick a random index out of the wanted digits
  - Return the cons of the digit using the random index and a recursive call to the generate code function
  - In the recursive call, slice the randomly picked index from the wanted digits list
  - Additionally reduce the length by 1 in the recursive call
- The setup function returns =t= to not spoil the secret code
#+begin_src lisp
  (defparameter *secret-code* nil)

  (defun generate-secret (digits len)
    (unless (<= len 0)
      (let* ((index (random (length digits)))
	     (digit (nth index digits)))
	(cons digit (generate-secret (concatenate 'list
						  (subseq digits 0 index)
						  (subseq digits (1+ index)))
				     (- len 1))))))

  (defun bulls-cows-setup ()
    (setf *secret-code* (generate-secret '(1 2 3 4 5 6 7 8 9) 4))
    t)
#+end_src

#+RESULTS:
: BULLS-COWS-SETUP
