#+title: notes/emacs
<2022-03-18 Fri>
* Linking to info pages
- The info function passed with the file or node will load the info section
#+begin_src elisp
(info "elisp")
#+end_src
- When you want to go to a specifc node a info file place the file name in parenthesis
#+begin_src elisp
(info "(elisp) Simple Macro")
#+end_src
- The path to a particular node can be seen in the mode line in the info buffer

* Keyboard Macros
- Execute this lisp function to load the info page on keyboard macros (info "(emacs) Keyboard Macros")
- To start recording a keyboard macro use =C-x (= or =<F3>=
- Once recording has started you will see =Def= in the mode line
- If you press =C-g= you will cancel recording the keyboard macro
- Once you have finished typing the macro commands press =C-x )= or =<F4>=
- To repeat the macro continue pressing =<F4>=
- Use the function =name-last-kbd-macro= to give a name to the macro at the top of the ring
- Once named you can invoke a keyboard macro like any other interactive function with =M-x <NAME_OF_MACRO>=
- If you want to see the lisp behind the macro you can run =M-x insert-kbd-macro=

* Recursively search for a file by name
Use =M-x find-name-dired= it will prompt you for a folder to recursively search then it prompt you for the file name.

* Recurively search file files with given content
Use =M-x rgrep= it wil prompt for the thing you are looking for in the files, followed by the wildcard of the files to include(ivy will do a completing read for this and prepend the current path but just type the wild card pretending it is not there) and lastly the base directory.

* File Local Variables
- [[https://www.emacswiki.org/emacs/FileLocalVariables][EmacsWiki: File Local Variables]]
- It is possible to set the value of a variable local only to a file in Emacs
- When you do this, Emacs will prompt you if you want to set those variables before actually doing it
- This might be handy in an org mode file with a lot of code blocks, so you want to inhibit the evaluation check
- Use =M-x add-file-local-variable= to interactively add a file local variabel to a buffer
* Directory Local Variables
- You can similarly add directory local variables with =M-x add-directory-local-variable=
- This [[https://emacs.stackexchange.com/questions/12433/use-dir-locals-el-to-append-to-before-save-hook-as-a-buffer-local-variable][link]] covers using hooks with buffer / directory local variables
* Dired Edit Mode
- =C-x C-q= enters dired edit mode
- In this mode you can edit the names of files as you would in a normal buffer
- When finished type =C-c C-c= this will execute all the queued changes

* C Indent Style
- When in =c-mode= use the command =c-set-style= (=C-c .=) to change the indent style
- =gnu= style is the default and uses 2 spaces for indent
- The
* Buttons
- Info page on buttons, (info "(elisp) Buttons")
- Below is code that creates a hello world button that displays the message "Hello, World"
#+begin_src elisp
(defun ajr-hello-world-button-pressed (button)
  (message "Hello, World!"))

(define-button-type 'ajr-hello-world-button
  'action 'ajr-hello-world-button-pressed
  'follow-link t
  'help-echo "Click to say \"Hello, World!\"")

(insert-button "Hello, World"
	       :type 'ajr-hello-world-button)
#+end_src
* Optional / Variadic Function Arguments
** Optional
- Info page on argument lists, (info "(elisp) Argument List")
- Use the =&optional= keyword to indicate a param is not required
- When an optional value is not supplied it will be =nil=
- Required arguments cannot follow optional ones in the argument list
** Variadic / Rest
- When the last argument of the argument list is =&rest <NAME_OF_REST_VAR>= the function will accept any number of arguments
- The rest variables will be stored in a list with the given name
- The below example shows using higher order functions with optional params
#+begin_src elisp
(defun ajr-example-opt-var-low (a b &optional c &rest d)
  (append
   (list a)
   (list b)
   (list c)
   d))

(defun ajr-example-opt-var-high (&optional c &rest d)
  (ajr-example-opt-var-low "higher" "order" c d))


(ajr-example-opt-var-high "args" 1 2 3 4 5 6 7 8 "...")
#+end_src

#+RESULTS:
| higher | order | args | (1 2 3 4 5 6 7 8 ...) |
