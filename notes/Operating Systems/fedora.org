#+title: Fedora Notes
<2022-07-05 Tue>
* Package Management
- [[https://docs.fedoraproject.org/en-US/fedora/latest/system-administrators-guide/package-management/DNF/][Fedora Docs: Package Management]]
- *DNF* stands for Dandified YUM
- Packages are =rpm= files
- Users use the =dnf= tool to manage packages

** Updating Packages
- Run =dnf check-update= to see a list of packages that need updating
- To upgrade an individual package run =dnf upgrade <PACKAGE>=
- To upgrade all packages run =dnf upgrade=

** Finding Packages
- To search through =rpms= run =dnf search <PACKAGE>=
- To search through all sources run =dnf search all <PACKAGE>=

** Listing Packages
- =dnf list= will list all available and installed packages
- =dnf list installed <PACKAGE>=
- The list command uses GLOB patterns, for example, =dnf list installed python*=
- To list all installed packages run =dnf list installed=
- To view all of the install repos and packages installed from those repos run =dnf repolist=

** Getting Package Info
- =dnf info <PACKAGE>= will give you info about a package

** Installing a Package
- =dnf install <PACKAGE>=

** Removing a Package
- =dnf remove <PACKAGE>=

** Upgrading Installed Packages
- =sudo dnf update=
** Upgrading to Latest Fedora Release
- [[https://docs.fedoraproject.org/en-US/quick-docs/dnf-system-upgrade/#sect-performing-system-upgrade][Performing System Upgrade with dnf]]
#+begin_src sh
sudo dnf upgrade --refresh
# reboot if there are any changes
sudo dnf install dnf-plugin-system-upgrade
sudo dnf system-upgrade download --releasever=36
sudo dnf system-upgrade reboot
#+end_src
** Viewing =dnf= History
- =dnf= will record history of packages added and removed
- To view the history run =sudo dnf history list=

** Enabling RPM Fusion
- [[https://docs.fedoraproject.org/en-US/quick-docs/setup_rpmfusion/][Fedora Docs: Enabling RPM Fusion]]
- RPM Fusion is a community repository of packages that are not distributed with Fedora
#+begin_src sh
sudo dnf install \
  https://download1.rpmfusion.org/free/fedora/rpmfusion-free-release-$(rpm -E %fedora).noarch.rpm
#+end_src

** Installing RPM files
- =sudo dnf install <PACKAGE>.rpm=
** Package List
#+begin_src sh
sudo dnf install \
	mg \
	gnome-tweaks \
	autoconf \
	texinfo \
	ImageMagick-devel \
	glib2-devel \
	gtk3-devel \
	libgccjit-devel \
	jansson-devel \
	gnutls-devel \
	ncurses-devel \
	htop \
	mosh \
	pass \
	pass-otp \
	syncthing \
	lua-devel \
	libass-devel \
	ledger \
	isync \
	notmuch \
	sbcl \
	clisp \
	nethack \
	openttd \
	python3-pip \
	ncdu \
	retroarch \
	inkscape \
	picocom  \
	abcde \
	beets \
	beets-plugins \
	fluidsynth \
	fluid-soundfont-gm \
	fluid-soundfont-gs \
	gimp \
	automake \
	SDL2-devel \
	SDL2_mixer-devel \
	SDL2_net-devel \
	glibc-doc \
	p7zip
#+end_src

* Wayland
- To see if you are in a Wayland session run =echo $WAYLAND_DISPLAY=
* Building Emacs
- clone Emacs from [[http://savannah.gnu.org/projects/emacs/][Savannah]] =git clone -b master git://git.sv.gnu.org/emacs.git=
- Run the =./autogen.sh= to build the configure script
- The below command shows the configure flags I like for Emacs
#+begin_src sh
./configure --with-native-compilation \
	    --with-json \
	    --with-rsvg \
	    --with-imagemagick \
	    --with-pgtk
#+end_src

* Hack Font
- Download the latest release of the font from the [[https://github.com/source-foundry/Hack][Hack GitHub]] page.
- Extract the zip and copy the files to =/usr/share/fonts= in a folder named =Hack=
- Download the font config file from [[https://raw.githubusercontent.com/source-foundry/Hack/master/config/fontconfig/45-Hack.conf][GitHub]]
- Create a user local font config dir if it doesn't exist, =mkdir -p ~/.config/fontconfig/conf.d=
- Copy the downloaded font config into that folder, =cp 45-Hack.conf ~/.config/fontconfig/conf.d=
- Regenerate your font cache, =fc-cache -f -v=
- Verify it is installed with, =fc-list | grep Hack=
* Flatpak
- Flatpak is preinstalled on Fedora
- The Flathub repository needs to be enabled in order to use software from it
- [[https://flatpak.org/setup/Fedora][Flatpak: Fedora Setup]]
#+begin_src sh
flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
#+end_src
** Various Flatpaks
- =flatpak install flathub dev.ares.ares=
- =flatpak install flathub org.signal.Signal=
** Issue where SDL2 Apps Crash on Exit
- This is probably due to the wayland video driver in SDL2
- A workaround is to set the environment variable =SDL_VIDEODRIVER= to use =x11= rather than =wayland=
* Crispy Doom
- Clone the Crispy Doom Source from [[https://github.com/fabiangreffrath/crispy-doom][GitHub]]
- Inside the folder run the following:
#+begin_src sh
autoreconf -fiv
./configure
make
sudo make install
#+end_src
- =crispy-doom -iwad DOOM.WAD -file SIGIL_v1_21.wad= is an example running the game with a particular iwad and pwad
- More info on command line arguments can be found here, [[https://www.chocolate-doom.org/wiki/index.php/Command_line_arguments][Chocolate Doom Wiki: Command Line Arguments]]
* Intel Performance Support
- [[https://wiki.archlinux.org/title/intel_graphics#Enable_performance_support][ArchWiki: Intel Performance Support]]
- By default applications cannot access Intel GPU performance counters
- You might see the below warning
#+begin_src text
MESA-INTEL: warning: Performance support disabled, consider sysctl dev.i915.perf_stream_paranoid=0
#+end_src
- To enable this feature add the above line to =/etc/sysctl.conf=
* Disable Super+P in GNOME
#+begin_src sh
gsettings set org.gnome.mutter.keybindings switch-monitor '[]'
#+end_src
