:NAME: dot emacs dot org
:AUTHOR: Adam Richardson
#+PROPERTY: header-args :tangle ~/.emacs
* Early Init
Disable package.el since I use straight.el
#+begin_src elisp :tangle ~/.config/emacs/early-init.el :mkdirp yes
  (setq package-enable-at-startup nil)
#+end_src
* Environment
Set various environment variables in emacs
#+begin_src elisp
  (setenv "LD_LIBRARY_PATH"
	  (concat
	   (getenv "HOME")
	   "/.local/lib"))
#+end_src
* Dired Mode
A set of customizations to dired mode to make it a little easier to use
#+begin_src elisp
  (setq dired-dwim-target t)
  (setq dired-recursive-copies (quote always))
  (setq dired-recursive-deletes (quote top))
  (add-hook 'dired-mode-hook
	    (lambda ()
	      (dired-hide-details-mode)))
#+end_src
* Alt Key
This allows the alt key to work as meta
#+begin_src elisp
  (setq x-alt-keysym 'meta)
#+end_src
* Visual line mode in text mode
This ensures that visual line mode is enabled by default for all major modes that derive from text-mode
#+begin_src elisp
  (add-hook 'text-mode-hook 'turn-on-visual-line-mode)
#+end_src
* Packages
** Setup straight.el
This code is from the straight.el README.md in the github repo [[https://github.com/raxod502/straight.el][straight.el]]
#+begin_src elisp
  (defvar bootstrap-version)
  (let ((bootstrap-file
	 (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
	(bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
	  (url-retrieve-synchronously
	   "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
	   'silent 'inhibit-cookies)
	(goto-char (point-max))
	(eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
#+end_src
*** Upgrading
- =M-x straight-pull-all= or =M-x straight-pull-package=
- The packages will be rebuilt when you restart emacs or you can run =M-x straight-check-all= to rebuild them, (its probably better to restart emacs to clean the old version out)
** Package List
#+begin_src elisp
  (straight-use-package 'magit)
  (straight-use-package 'counsel)
  (straight-use-package 'markdown-mode)
  (straight-use-package 'geiser)
  (straight-use-package 'geiser-guile)
  (straight-use-package 'bongo)
  (straight-use-package 'projectile)
  (straight-use-package 'counsel-projectile)
  (straight-use-package 'speed-type)
  (straight-use-package 'paredit)
  (straight-use-package 'elfeed)
  (straight-use-package 'password-store)
  (straight-use-package 'password-store-otp)
  (straight-use-package 'lua-mode)
  (straight-use-package 'ace-window)
  (straight-use-package 'notmuch)
  (straight-use-package 'yasnippet)
  (straight-use-package 'yasnippet-snippets)
  (straight-use-package 'yafolding)
#+end_src
* Personal Elisp Files
** elfeed
#+name: elfeed
#+begin_src elisp
  (defun ajr-elfeed ()
    "My command to start and update elfeed"
    (interactive)
    (delete-other-windows)
    (elfeed)
    (elfeed-search-clear-filter)
    (elfeed-update)
    (beginning-of-buffer))
#+end_src
** org capture
#+name: org-capture
#+begin_src elisp
  (defun ajr-org-basic-capture (key name filename)
    "Generates a basic capture template. It will
     prompt you for the title of the heading and place
     the point in the body of the heading. KEY is the
     character that needs to be pressed in org capture
     to use this template. NAME is the name of the capture
     template. FILENAME is which org file in your org-directory."
    (list key name 'entry
	  (list 'file+headline filename name)
	  "* %^{Title?}\n%?"))
#+end_src
** web search
#+name: web-search
#+begin_src elisp
  (defun ajr-search-web (term)
    "Prompts the user for a search TERM. Searches
  duckduckgo with eww for the term. Inspired by
  https://gist.github.com/brenns10/69d39f6c46170093f73d"
    (interactive "MSearch Web: ")
    (eww (format "https://html.duckduckgo.com/html/?q=%s"
		 (url-hexify-string term))))
#+end_src
** mail
#+name: mail
#+begin_src elisp
  (defun ajr-sync-mail ()
    "Starts a process name `syncmail' and sends the output to
  a special mode buffer. This will pop to the buffer as the
  process is running."
    (interactive)
    (with-current-buffer (get-buffer-create "*syncmail*")
      (special-mode)
      (setq buffer-read-only nil)
      (erase-buffer)
      (start-process "syncmail" (current-buffer) "syncmail")
      (setq buffer-read-only t)
      (pop-to-buffer (current-buffer))))
#+end_src
** music
#+name: music
#+begin_src elisp
  (setq ajr--music-dir "~/music")

  (defun ajr--all-albums ()
    "Returns a list of pairs of all available albums `(ARTIST . ALBUM)'"
    (let ((artists (directory-files ajr--music-dir
				    nil
				    directory-files-no-dot-files-regexp)))
      (mapcan (lambda (artist)
		(let ((artist-path (string-join
				    (list ajr--music-dir
					  "/" artist))))
		  (mapcar (lambda (album)
			    `(,artist . ,album))
			  (directory-files artist-path
					   nil
					   directory-files-no-dot-files-regexp))))
	      artists)))

  (defun ajr--ask-album ()
    "Prompts the user to choose an album, returns `(ARTIST . ALBUM)"
    (let* ((albums (ajr--all-albums))
	   (album-display-names
	    (mapcar (lambda (album)
		      (format "%s - %s" (car album) (cdr album)))
		    albums))
	   (albums-alist (mapcar (lambda (n)
				   `(,(nth n album-display-names) .
				     ,(nth n albums)))
				 (number-sequence 0 (- (length albums) 1)))))

      (cdr (assoc (completing-read "Which album? "
			       album-display-names)
	      albums-alist))))

  (defun ajr--album-path (album)
    "Gets the path of an album from `(ARTIST . ALBUM)'"
    (string-join (list ajr--music-dir
		       "/"
		       (car album)
		       "/"
		       (cdr album))))

  (defun ajr-bongo-play-album ()
    "Prompts the user for an album and starts playing it"
    (interactive)
    (let ((album (ajr--ask-album)))
      (with-bongo-playlist-buffer
	(bongo-stop)
	(bongo-erase-buffer)
	(bongo-insert-directory-tree (ajr--album-path album))
	(goto-char (point-min))
	(bongo-play))))
#+end_src
** video
#+name: video
#+begin_src elisp
  (setq ajr--video-dir (concat (getenv "HOME")
			       "/videos"))

  (defun ajr--ask-video ()
    (let ((videos (directory-files ajr--video-dir
				   nil
				   directory-files-no-dot-files-regexp)))
      (completing-read "Which video? " videos)))

  (defun ajr-video-play ()
    (interactive)
    (let ((video (ajr--ask-video)))
      (start-process "mpv" nil "mpv" (string-join (list ajr--video-dir
							"/"
							video)))))
  (defun ajr-video-dired ()
    "Opens dired buffer to `ajr--video-dir'
  in other window"
    (interactive)
    (find-file-other-window ajr--video-dir))

  (require 'url-util)
  (defun ajr-video-youtube-dl-at-point ()
    (interactive)
    (let ((yt-url (url-get-url-at-point)))
      (with-current-buffer (generate-new-buffer "*youtube-dl*")
	(special-mode)
	(setq buffer-read-only nil)
	(cd ajr--video-dir)
	(start-process (format "youtube-dl %s" yt-url)
		       (current-buffer)
		       "youtube-dl" "--no-progress" yt-url)
	(pop-to-buffer (current-buffer)))))
#+end_src
** ajr.el
 #+begin_src elisp :noweb yes :tangle ~/.emacs.d/ajr.el :mkdirp yes
   <<elfeed>>

   <<org-capture>>

   <<web-search>>

   <<mail>>

   <<music>>
 #+end_src
 Load the personal elisp files in init file
 #+begin_src elisp
   (load "~/.emacs.d/ajr")
 #+end_src

* Completion
I use ivy for my completion framework
#+begin_src elisp
  (ivy-mode)
#+end_src
* Global Hotkeys
#+begin_src elisp
  (global-set-key (kbd "C-M-s") 'swiper)
  (global-set-key (kbd "C-c r") 'ivy-resume)
  (global-set-key (kbd "M-x") 'counsel-M-x)
  (global-set-key (kbd "C-x C-f") 'counsel-find-file)
  (global-set-key (kbd "<f8>") 'compile)
  (global-set-key (kbd "<f9>") 'whitespace-mode)
  (global-set-key (kbd "<f10>") 'whitespace-cleanup)
  (global-set-key (kbd "<f11>") 'notmuch)
  (global-set-key (kbd "<f12>") 'comment-dwim)
  (global-set-key (kbd "<f5>") 'ajr-elfeed)
  (global-set-key (kbd "C-<f1>") 'password-store-copy)

  ;; music
  (define-key global-map (kbd "C-c m") (make-sparse-keymap))
  (global-set-key (kbd "C-c m b") 'bongo-playlist)
  (global-set-key (kbd "C-c m a") 'ajr-bongo-play-album)
  (global-set-key (kbd "C-c m p") 'bongo-pause/resume)
  (global-set-key (kbd "C-c m <right>") 'bongo-next)
  (global-set-key (kbd "C-c m <left>") 'bongo-previous)

  ;; videos
  (define-key global-map (kbd "C-c v") (make-sparse-keymap))
  (global-set-key (kbd "C-c v p") 'ajr-video-play)
  (global-set-key (kbd "C-c v b") 'ajr-video-dired)
  (global-set-key (kbd "C-c v d") 'ajr-video-youtube-dl-at-point)

  (global-set-key (kbd "C-x C-b") 'ibuffer)
  (global-set-key (kbd "C-c l") 'org-store-link)
  (global-set-key (kbd "C-c a") 'org-agenda)
  (global-set-key (kbd "C-c c") 'org-capture)
  (global-set-key (kbd "C-x w") 'ajr-search-web)
  (global-set-key (kbd "C-x o") 'ace-window)
  (global-set-key (kbd "C-<return>") 'yafolding-toggle-element)
#+end_src
* Paredit
This enables paredit mode for various lisps
#+begin_src elisp
  (autoload 'enable-paredit-mode "paredit"
    "Turn on pseudo-structural editing of Lisp code." t)
  (add-hook 'emacs-lisp-mode-hook #'enable-paredit-mode)
  (add-hook 'eval-expression-minibuffer-setup-hook #'enable-paredit-mode)
  (add-hook 'lisp-mode-hook #'enable-paredit-mode)
  (add-hook 'lisp-interaction-mode-hook #'enable-paredit-mode)
  (add-hook 'scheme-mode-hook #'enable-paredit-mode)
#+end_src
* Projectile
Enables projectile mode and sets the project search path and command map
#+begin_src elisp
  (projectile-mode +1)
  (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
  (setq projectile-project-search-path '("~/code"
					 "~/src"))
#+end_src
* Org Mode
Customizations and global keys for org mode
#+begin_src elisp
  (global-set-key (kbd "C-c l") 'org-store-link)
  (global-set-key (kbd "C-c a") 'org-agenda)
  (global-set-key (kbd "C-c c") 'org-capture)
#+end_src

#+begin_src elisp
  (setq org-capture-templates
	(list (list "i" "Ideas")
	      (ajr-org-basic-capture "ie" "Emacs" "ideas.org")
	      (ajr-org-basic-capture "ip" "Programming Projects" "ideas.org")
	      (ajr-org-basic-capture "io" "Org-mode" "ideas.org")
	      (ajr-org-basic-capture "iw" "Writing" "ideas.org")
	      (list "t" "Quick Todo" 'checkitem
		    (list 'file "quick-todos.org") nil
		    :prepend t)))
#+end_src
* Before Save Hook
#+begin_src elisp
  (add-hook 'before-save-hook 'whitespace-cleanup)
#+end_src
* Bongo
#+begin_src elisp
  (require 'bongo)
#+end_src
* Global Modes
#+begin_src elisp
  (yas-global-mode)
  (yafolding-mode)
  (add-hook 'prog-mode-hook 'linum-mode)
  (add-hook 'prog-mode-hook 'hl-line-mode)
#+end_src
* Customizations
- Customizations should be stored in a separate file =~/.emacs_custom.el=
- This should be last to ensure that the =~/.emacs-custom.el= can do any local overrides that might be needed

#+begin_src elisp
  (setq custom-file "~/.emacs-custom.el")
  (load custom-file)
#+end_src
